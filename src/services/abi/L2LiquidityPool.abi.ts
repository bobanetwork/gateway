const L2LiquidityPoolABI = [
  'constructor()',
  'event AddLiquidity(address sender, uint256 amount, address tokenAddress)',
  'event ClientDepositL2(address sender, uint256 receivedAmount, address tokenAddress)',
  'event ClientPayL2(address sender, uint256 amount, uint256 userRewardFee, uint256 ownerRewardFee, uint256 totalFee, address tokenAddress)',
  'event ClientPayL2Settlement(address sender, uint256 amount, uint256 userRewardFee, uint256 ownerRewardFee, uint256 totalFee, address tokenAddress)',
  'event DaoRoleTransferred(address newDao)',
  'event OwnerRecoverFee(address sender, address receiver, uint256 amount, address tokenAddress)',
  'event OwnershipTransferred(address newOwner)',
  'event Paused(address account)',
  'event RebalanceLP(uint256 amount, address tokenAddress)',
  'event Unpaused(address account)',
  'event WithdrawLiquidity(address sender, address receiver, uint256 amount, address tokenAddress)',
  'event WithdrawReward(address sender, address receiver, uint256 amount, address tokenAddress)',
  'function BOBAAddress() view returns (address)',
  'function DAO() view returns (address)',
  'function DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS() view returns (uint32)',
  'function L1LiquidityPoolAddress() view returns (address)',
  'function addLiquidity(uint256 _amount, address _tokenAddress) payable',
  'function billingContractAddress() view returns (address)',
  'function clientDepositL2(uint256 _amount, address _tokenAddress) payable',
  'function clientPayL2(address _to, uint256 _amount, address _tokenAddress)',
  'function clientPayL2Batch(tuple(address to, address l2TokenAddress, uint256 amount)[] _tokens)',
  'function clientPayL2Settlement(address _to, uint256 _amount, address _tokenAddress)',
  'function configureBillingContractAddress(address _billingContractAddress)',
  'function configureFee(uint256 _userRewardMinFeeRate, uint256 _userRewardMaxFeeRate, uint256 _ownerRewardFeeRate)',
  'function configureFeeExits(uint256 _userRewardMinFeeRate, uint256 _userRewardMaxFeeRate, uint256 _ownerRewardFeeRate)',
  'function configureGas(uint32 _l1GasFee)',
  'function extraGasRelay() view returns (uint256)',
  'function getFinalizeDepositL1Gas() view returns (uint32)',
  'function getUserRewardFeeRate(address _l2TokenAddress) view returns (uint256 userRewardFeeRate)',
  'function initialize(address _l2CrossDomainMessenger, address _L1LiquidityPoolAddress)',
  'function messenger() view returns (address)',
  'function owner() view returns (address)',
  'function ownerRecoverFee(uint256 _amount, address _tokenAddress, address _to)',
  'function ownerRewardFeeRate() view returns (uint256)',
  'function pause()',
  'function paused() view returns (bool)',
  'function poolInfo(address) view returns (address l1TokenAddress, address l2TokenAddress, uint256 userDepositAmount, uint256 lastAccUserReward, uint256 accUserReward, uint256 accUserRewardPerShare, uint256 accOwnerReward, uint256 startTime)',
  'function rebalanceLP(uint256 _amount, address _tokenAddress)',
  'function registerBOBA(address _BOBAAddress, address _xBOBAAddress)',
  'function registerPool(address _l1TokenAddress, address _l2TokenAddress)',
  'function transferDAORole(address _newDAO)',
  'function transferOwnership(address _newOwner)',
  'function unpause()',
  'function updateUserRewardPerShare(address _tokenAddress)',
  'function userInfo(address, address) view returns (uint256 amount, uint256 rewardDebt, uint256 pendingReward)',
  'function userRewardMaxFeeRate() view returns (uint256)',
  'function userRewardMinFeeRate() view returns (uint256)',
  'function withdrawLiquidity(uint256 _amount, address _tokenAddress, address _to)',
  'function withdrawReward(uint256 _amount, address _tokenAddress, address _to)',
  'function xBOBAAddress() view returns (address)',
  'function xBOBAStatus(address) view returns (bool)',
]
export default L2LiquidityPoolABI
